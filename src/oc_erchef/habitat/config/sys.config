%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=eruby.erlang et
[
    {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
    {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.org
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
                      {lager_console_backend, {{cfg.lager.lager_console_backend}}},
                      {lager_file_backend, [{file, "{{pkg.svc_var_path}}/log/error.log"},
                                            {level, error}, {size, 10485760},
                                            {date, "$D0"}, {count, 5}]},
                      {lager_file_backend, [{file, "{{pkg.svc_var_path}}/log/console.log"},
                                            {level, info}, {size, 10485760},
                                            {date, "$D0"}, {count, 5}]}
                     ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "{{pkg.svc_var_path}}/log/crash.log"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 10485760},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 5},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},

        %% Bump up the "high-water mark" (default 50), which is the
        %% number of messages per second allowed to come from
        %% error_logger.  This is the same as used by
        %% opscode-chef-mover, FWIW.
        {error_logger_hwm, {{cfg.lager.error_logger_hwm}}}
    ]},

    {chef_secrets, [
        {provider, chef_secrets_json_file},
        %% TODO: don't hard code this path
        {provider_config, [{secrets_file, "{{pkg.svc_config_path}}/private-chef-secrets.json"}]}
    ]},

    {oc_chef_wm, [
        {ip_mode, [ {{cfg.private_chef.ip_mode}} ] },
        {api_version, "{{cfg.oc_chef_wm.api_version}}"},
        {server_flavor, "{{cfg.oc_chef_wm.flavor}}"},

        {default_orgname, {{cfg.oc_chef_wm.default_orgname}} },

        {ip, "{{cfg.oc_chef_wm.listen_ip}}"},
        {port, {{cfg.oc_chef_wm.port}}},
        {reqid_header_name, "X-Request-Id"},
        {auth_skew, {{cfg.oc_chef_wm.auth_skew}}},
        %% currently only used by the search endpoint to bound
        %% how many nodes are deserialized at a time in
        %% preparing a response.
        {bulk_fetch_batch_size, {{cfg.oc_chef_wm.bulk_fetch_batch_size}}},
        {superusers, [<<"pivotal">>]},
        %% metrics config
        {root_metric_key, "{{cfg.oc_chef_wm.root_metric_key}}"},

        {authz_timeout, {{cfg.oc_chef_wm.authz_timeout}}},
        {authz_fanout, {{cfg.oc_chef_wm.authz_fanout}}},

        {reindex_batch_size, {{cfg.oc_chef_wm.reindex_batch_size}}},

        {enable_actions, {{cfg.oc_chef_wm.actions}}},
        %% Ignore ldap in the habitat config for now
        {ldap, []},
        %% these are used for reporting on license status on the
        %% license endpoint; it would have been nice to give these
        %% their own logical section, but erlang requires these to
        %% be part of a loaded application
        {node_license, {{cfg.oc_chef_wm.node_license}}},
        {upgrade_url, <<"{{cfg.oc_chef_wm.upgrade_url}}">>},
        {actions_host, "{{cfg.oc_chef_wm.actions_host}}"},
        {actions_port, {{cfg.oc_chef_wm.ctions_port}} },
        {actions_user, <<"{{cfg.oc_chef_wm.actions_user}}">>},
        {actions_vhost, <<"{{cfg.oc_chef_wm.actions_vhost}}">>},
        {actions_exchange, <<"{{cfg.oc_chef_wm.actions_exchange}}">>},
        {actions_fqdn, <<"{{cfg.oc_chef_wm.actions_fqdn}}">>},
        {max_request_size, {{cfg.oc_chef_wm.max_request_size}} },
        {server_version, "{{cfg.oc_chef_wm.server_version}}"},
        {health_ping_timeout, {{cfg.oc_chef_wm.health_ping_timeout}}},
        {health_ping_modules, [
            {{#if cfg.data_collector.enabled}}
            data_collector,
            {{/if}}
            oc_chef_authz,
            chef_sql,
            chef_{{cfg.oc_chef_wm.search_provider}}
        ]},
        {base_resource_url, {{cfg.oc_chef_wm.base_resource_url}} },
        {bulk_fetch_batch_size, {{cfg.oc_chef_wm.bulk_fetch_batch_size}} },
        {strict_search_result_acls, {{cfg.oc_chef_wm.strict_search_result_acls}} },

        {rabbitmq, [
            {management,[
                {user, "{{cfg.oc_chef_wm.rabbitmq.management.user}}"},
                {port, {{cfg.oc_chef_wm.rabbitmq.management.port}} },
                %% rabbitmq management http connection pool
                {rabbitmq_management_service, [
                    {{#if cfg.private_chef.fips_enabled ~}}
                    %% See note about Bookshelf
                    {root_url, "http://{{cfg.oc_chef_wm.actions_host}}:{{cfg.oc_chef_wm.rabbitmq.management.port}}/api"},
                    {{else ~}}
                    {root_url, "https://{{cfg.oc_chef_wm.actions_host}}:{{cfg.oc_chef_wm.rabbitmq.management.port}}/api"},
                    {{/if ~}}
                    {timeout, {{cfg.oc_chef_wm.rabbitmq.management.timeout}} },
                    {init_count, {{cfg.oc_chef_wm.rabbitmq.management.init_count}} },
                    {max_count, {{cfg.oc_chef_wm.rabbitmq.management.max_count}} },
                    {cull_interval, { {{cfg.oc_chef_wm.rabbitmq.management.cull_interval}}, sec}},
                    {max_age, { {{cfg.oc_chef_wm.rabbitmq.management.max_age}}, sec}},
                    {max_connection_duration, { {{cfg.oc_chef_wm.rabbitmq.management.max_connection_duration}}, sec}},

                    {ibrowse_options, [
                        {{cfg.oc_chef_wm.rabbitmq.management.ibrowse_options}}
                    ]}
                ]}
            ]},
            {{#if cfg.oc_chef_wm.rabbitmq.monitoring.queue_length_monitor_enabled ~}}
            {{#if cfg.oc_chef_wm.enable_actions ~}}
            {monitoring, [
                {queue_length_monitor_enabled, true},
                {queue_length_monitor_vhost, "{{cfg.oc_chef_wm.rabbitmq.monitoring.queue_length_monitor_vhost}}"},
                {queue_length_monitor_queue, "{{cfg.oc_chef_wm.rabbitmq.monitoring.queue_length_monitor_queue}}"},
                {queue_length_monitor_millis, {{cfg.oc_chef_wm.rabbitmq.monitoring.queue_length_monitor_millis}} },
                {queue_length_monitor_timeout_millis, {{cfg.oc_chef_wm.rabbitmq.monitoring.queue_length_monitor_timeout_millis}} },
                {drop_on_full_capacity, {{cfg.oc_chef_wm.rabbitmq.monitoring.drop_on_full_capacity}} },
                {prevent_erchef_startup_on_full_capacity, {{cfg.oc_chef_wm.rabbitmq.monitoring.prevent_erchef_startup_on_full_capacity}} },
                {queue_at_capacity_affects_overall_status, {{cfg.oc_chef_wm.rabbitmq.monitoring.queue_at_capacity_affects_overall_status}} }
            ]}
            {{/if ~}}
            {{/if ~}}
        ]}
    ]},

    {chef_authn, [
        {secrets_module, {chef_secrets, get, [{default, [<<"chef-server">>, <<"webui_pub_key">>]}]}},
        {keygen_cache_size, 10},
        {keygen_start_size, 0},
        {keygen_timeout, 1000},
        {keygen_size, 2048}
    ]},

    {oc_chef_authz, [
        {authz_root_url, "http://127.0.0.1:9463" },
        {authz_service, [
            {root_url, "http://127.0.0.1:9463" },
            {timeout, 2000},
            {init_count, 25},
            {max_count, 100},
            {queue_max, 50},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},
            {ibrowse_options, [{connect_timeout, 5000}]}
        ]},
        {cleanup_batch_size, 0}
    ]},

    {chef_db, [
        {bulk_fetch_batch_size, 5}
    ]},

    {chef_index, [
        {ip_mode, [ ipv4 ] },
        {rabbitmq_host, "127.0.0.1"},
        {rabbitmq_port, 5672 },
        {rabbitmq_user, <<"chef">>},
        {rabbitmq_vhost, <<"/chef">>},
        {rabbitmq_exchange, <<"">>},
        {search_provider, solr},
        {search_queue_mode, rabbitmq},
        {search_batch_max_size, 5000000},
        {search_batch_max_wait, 10},
        {reindex_sleep_min_ms, 500},
        {reindex_sleep_max_ms, 2000},
        {reindex_item_retries, 3},
        {solr_elasticsearch_major_version, 0},
        {solr_service, [
            {root_url, "http://127.0.0.1:8983/solr"},
            {timeout, 30000},
            {init_count, 25},
            {max_count, 100},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70,sec}},
            {ibrowse_options, [{connect_timeout, 10000}]}
        ]},
        {rabbitmq_index_management_service, [
            {enabled, true},
            {user, "rabbitmgmt"},
            {root_url, "https://127.0.0.1:15672/api"},
            {timeout, 30000},
            {init_count, 25},
            {max_count, 100},
            {cull_interval, {60, sec}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},

            {ibrowse_options, [
                {connect_timeout, 10000}
            ]}
        ]}
    ]},

    {chef_objects, [
        {s3_url, "https://chef-server.test"},
        {s3_external_url, host_header},
        {s3_platform_bucket_name, "bookshelf"},
        {s3_url_ttl, 28800},
        {s3_url_expiry_window_size, off},
        {s3_parallel_ops_timeout, 5000},
        {s3_parallel_ops_fanout, 20},
        {depsolver_timeout, 5000},
        {depsolver_pooler_timeout, 0}
    ]},

    {stats_hero, [
        {udp_socket_pool_size, 20 },
        {protocol, estatsd},
        {estatsd_host, "127.0.0.1"},
        {estatsd_port, 9466}
    ]},

    {opscoderl_httpc, [
        {pooler_timeout, 0}
    ]},

    {sqerl, [
        {db_driver_mod, sqerl_pgsql_client},
        {config_cb, {chef_secrets_sqerl, config, [{<<"opscode_erchef">>, <<"sql_password">>}]}},
        {ip_mode, [ ipv4 ] },
        %% Database connection parameters
        {db_host, "127.0.0.1"},
        {db_port, 5432},
        {db_user, "opscode_chef"},
        {db_name, "opscode_chef" },
        {idle_check, 10000},
        {pooler_timeout, 2000},
        {db_timeout, 5000},
        {prepared_statements, {oc_chef_sql, statements, [pgsql]}},
        {column_transforms, [
            {<<"created_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
            {<<"updated_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}
        ]}
    ]},

    {webmachine, [
        {log_handlers, [
            {oc_wm_request_logger, [
                {file, "/var/log/opscode/opscode-erchef/requests.log"},
                {file_size, 100},  %% Size in MB
                {files, 10},
                {annotations, [req_id, org_name, msg, darklaunch, perf_stats, user, req_api_version]}
            ]}
        ]}
    ]},

    {ibrowse, [
        {default_max_sessions, 256},
        {default_max_pipeline_size, 1}
    ]},

    {pooler, [
        {pools, [
            [
                {name, sqerl},
                {max_count, 20},
                {init_count, 20},
                {start_mfa, {sqerl_client, start_link, []}},
                {queue_max, 20}
            ],
            [
                {name, chef_depsolver},
                {max_count, 5},
                {init_count, 5},
                {queue_max, 50},
                {start_mfa, {chef_depsolver_worker, start_link, []}}
            ]
        ]
    },

    {metrics_module, folsom_metrics}
]}

    ,
    {ssl, [
        {session_cb, noop_session_cache}
    ]}
].
